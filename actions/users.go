package actions

import (
	"github.com/desylva/movieparty/mailers"
	"github.com/desylva/movieparty/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"github.com/satori/go.uuid"
	"log"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (User)
// DB Table: Plural (users)
// Resource: Plural (Users)
// Path: Plural (/users)
// View Template Folder: Plural (/templates/users/)

// UsersLoginGet renders a login form
func UsersLoginGet(c buffalo.Context) error {
	return c.Render(200, r.HTML("users/login.html"))
}

// UsersLogoutGet destroys the session
func UsersLogoutGet(c buffalo.Context) error {
	c.Session().Clear()
	return c.Redirect(307, "rootPath()")
}

// UsersLoginPost handles login form
func UsersLoginPost(c buffalo.Context) error {
	// Allocate an empty User
	userForm := UserForm{}

	// Bind user to the html form elements
	if err := c.Bind(&userForm); err != nil {
		return errors.WithStack(err)
	}

	// Find user to attach the password_hash_reset to
	user := models.User{}
	u, err := user.GetByEmail(c, string(userForm.Email))
	if err != nil {
		c.Flash().Add("danger", "Invalid user")
		return c.Render(200, r.HTML("users/login.html"))
	}

	ok := models.ComparePassword(u.PasswordHash, string(userForm.Password))
	if !ok {
		c.Flash().Add("danger", "Invalid password")
		return c.Redirect(307, "rootPath()")
	}

	c.Session().Set("current_user_id", u.ID.String())
	return c.Redirect(307, "rootPath()")
}

// UsersPasswordResetGet renders a password recovery form
func UsersPasswordResetGet(c buffalo.Context) error {
	return c.Render(200, r.HTML("users/password_reset.html"))
}

// UsersPasswordResetPost handles password recovery form
func UsersPasswordResetPost(c buffalo.Context) error {
	// Allocate an empty User
	userForm := UserForm{}

	// Bind user to the html form elements
	if err := c.Bind(&userForm); err != nil {
		return errors.WithStack(err)
	}
	email := string(userForm.Email)

	// Generate a random hash string
	hash := uuid.NewV4()
	hashstr := hash.String()

	// Find user to attach the password_hash_reset to
	user := models.User{}
	u, err := user.GetByEmail(c, email)
	if err != nil {
		return c.Redirect(307, "rootPath()")
	}

	// Update user with the new password_hash_reset
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		c.Flash().Add("danger", "no connection found")
	}
	// Use the generated UUID for email recovery
	u.PasswordHashReset = hashstr
	verrs, err := tx.ValidateAndUpdate(&u)
	if err != nil {
		log.Fatal("74: " + err.Error())
		return c.Redirect(307, "rootPath()")
	}
	if verrs.HasAny() {
		log.Fatal(verrs)
	}

	// Send email to reset password
	var emails []string
	emails = append(emails, email)
	err = mailers.SendAccountReset(c, emails, hashstr)
	if err != nil {
		log.Fatal(err)
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Account password reset was submitted successfully. An email would have been sent to the account owner.")

	// and redirect to the users login page
	return c.Redirect(307, "rootPath()")
}

// UsersPasswordReset handles password recovery form
func UsersPasswordReset(c buffalo.Context) error {
	return c.Render(200, r.HTML("users/password_reset_processed.html"))
}

// UsersRecoverGet renders an account recovery form
func UsersRecoverGet(c buffalo.Context) error {
	c.Set("id", c.Param("id"))
	return c.Render(200, r.HTML("users/password_recover.html"))
}

// UsersRecoverPost handles a password recovery form
func UsersRecoverPost(c buffalo.Context) error {
	// Allocate an empty User
	userForm := UserForm{}

	// Bind user to the html form elements
	if err := c.Bind(&userForm); err != nil {
		return errors.WithStack(err)
	}

	// user := &models.User{}
	// and redirect to the users to the homepage
	return c.Redirect(307, "rootPath()")
}

// UsersResource is the resource for the User model
type UsersResource struct {
	buffalo.Resource
}

// List gets all Users. This function is mapped to the path
// GET /users
func (v UsersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	users := &models.Users{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Users from the DB
	if err := q.All(users); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, users))
}

// Show gets the data for one User. This function is mapped to
// the path GET /users/{user_id}
func (v UsersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, user))
}

// New renders the form for creating a new User.
// This function is mapped to the path GET /users/new
func (v UsersResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.User{}))
}

type password string
type email string

type UserForm struct {
	Name     string   `json:"name" db:"name"`
	Email    email    `json:"email" db:"email"`
	Password password `json:"-" db:"-"`
}

// Create adds a User to the DB. This function is mapped to the
// path POST /users
func (v UsersResource) Create(c buffalo.Context) error {
	// Allocate an empty User
	userForm := UserForm{}

	// Bind user to the html form elements
	if err := c.Bind(&userForm); err != nil {
		return errors.WithStack(err)
	}

	user := &models.User{}
	user.Name = userForm.Name
	user.Email = string(userForm.Email)
	user.PasswordHash = models.EncryptPassword(string(userForm.Password))

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Check the user is not yet in use
	userCheck := models.User{}
	_, err := userCheck.GetByEmail(c, user.Email)
	if err == nil {
		c.Flash().Add("danger", "Email is already in use")
		return c.Render(422, r.Auto(c, &models.User{}))
	}

	hex := models.UserColorGenerator()
	user.Color = hex

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(user)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, user))
	}

	// Send email confirmation of new account
	var emails []string
	emails = append(emails, user.Email)
	err = mailers.SendAccountWelcomes(emails)
	if err != nil {
		log.Fatal(err)
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "User was created successfully")

	// and redirect to the users login page
	return c.Redirect(307, "rootPath()")
}

// Edit renders a edit form for a User. This function is
// mapped to the path GET /users/{user_id}/edit
func (v UsersResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	hex := models.UserColorGenerator()
	user.Color = hex

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, user))
}

// Update changes a User in the DB. This function is mapped to
// the path PUT /users/{user_id}
func (v UsersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind User to the html form elements
	if err := c.Bind(user); err != nil {
		return errors.WithStack(err)
	}

	hex := models.UserColorGenerator()
	user.Color = hex

	verrs, err := tx.ValidateAndUpdate(user)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, user))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "User was updated successfully")

	// and redirect to the users index page
	return c.Render(200, r.Auto(c, user))
}

// Destroy deletes a User from the DB. This function is mapped
// to the path DELETE /users/{user_id}
func (v UsersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty User
	user := &models.User{}

	// To find the User the parameter user_id is used.
	if err := tx.Find(user, c.Param("user_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(user); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "User was destroyed successfully")

	// Redirect to the users index page
	return c.Render(200, r.Auto(c, user))
}

// SetCurrentUser attempts to find a user based on the current_user_id
// in the session. If one is found it is set on the context.
func SetCurrentUser(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		u := &models.User{}
		if uid := c.Session().Get("current_user_id"); uid != nil {
			tx := c.Value("tx").(*pop.Connection)
			err := tx.Find(u, uid)
			if err != nil {
				c.Session().Clear()
			}
		}
		c.Set("current_user", u)
		return next(c)
	}
}

// Authorize require a user be logged in before accessing a route
func Authorize(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		if uid := c.Session().Get("current_user_id"); uid == nil {
			c.Flash().Add("danger", "You must be authorized to see that page")
			return c.Redirect(302, "usersLoginPath()")
		}
		return next(c)
	}
}
