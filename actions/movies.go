package actions

import (
	//"os/user"
	"fmt"
	"github.com/desylva/movienight/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Movie)
// DB Table: Plural (movies)
// Resource: Plural (Movies)
// Path: Plural (/movies)
// View Template Folder: Plural (/templates/movies/)

// MoviesResource is the resource for the Movie model
type MoviesResource struct {
	buffalo.Resource
}

// List gets all Movies. This function is mapped to the path
// GET /movies
func (v MoviesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	movies := &models.Movies{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Movies from the DB
	if err := q.All(movies); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, movies))
}

// Show gets the data for one Movie. This function is mapped to
// the path GET /movies/{movie_id}
func (v MoviesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	// To find the Movie the parameter movie_id is used.
	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, movie))
}

// New renders the form for creating a new Movie.
// This function is mapped to the path GET /movies/new
func (v MoviesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Movie{}))
}

// Create adds a Movie to the DB. This function is mapped to the
// path POST /movies
func (v MoviesResource) Create(c buffalo.Context) error {
	// Allocate an empty Movie
	movie := &models.Movie{}

	s := c.Session()
	su := s.Get("user_id")
	userID, ok := su.(string)
	fmt.Println(movie)
	if !ok {
		return errors.New("Couldn't convert user id")
	}
	// newUserUUID, err := movie.UserStringToUserUUID(userID)
	// if err != nil {
	// 	return errors.WithStack(err)
	// }
	// movie.UserUUID = newUserUUID

	// Bind movie to the html form elements
	if err := c.Bind(movie); err != nil {
		return errors.WithStack(err)
	}

	movie.UserUUID = userID

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(movie)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, movie))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was created successfully")

	// and redirect to the movies index page
	return c.Render(201, r.Auto(c, movie))
}

// Edit renders a edit form for a Movie. This function is
// mapped to the path GET /movies/{movie_id}/edit
func (v MoviesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, movie))
}

// Update changes a Movie in the DB. This function is mapped to
// the path PUT /movies/{movie_id}
func (v MoviesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Movie to the html form elements
	if err := c.Bind(movie); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(movie)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, movie))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was updated successfully")

	// and redirect to the movies index page
	return c.Render(200, r.Auto(c, movie))
}

// Destroy deletes a Movie from the DB. This function is mapped
// to the path DELETE /movies/{movie_id}
func (v MoviesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	// To find the Movie the parameter movie_id is used.
	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(movie); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Movie was destroyed successfully")

	// Redirect to the movies index page
	return c.Render(200, r.Auto(c, movie))
}
