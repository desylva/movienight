package actions

import (
	"encoding/json"
	"fmt"
	"github.com/desylva/movienight/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/envy"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

var OMDB_API_KEY = envy.Get("OMDB_API_KEY", "nothing")
var OMDB_URL = "http://www.omdbapi.com/"

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Movie)
// DB Table: Plural (movies)
// Resource: Plural (Movies)
// Path: Plural (/movies)
// View Template Folder: Plural (/templates/movies/)

// MoviesResource is the resource for the Movie model
type MoviesResource struct {
	buffalo.Resource
}

// List gets all Movies. This function is mapped to the path
// GET /movies
func (v MoviesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	movies := &models.Movies{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Order("score desc, name asc")

	// Retrieve all Movies from the DB
	if err := q.All(movies); err != nil {
		return errors.WithStack(err)
	}

	//movies = orderMoviesByScore(movies)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, movies))
}

// Show gets the data for one Movie. This function is mapped to
// the path GET /movies/{movie_id}
func (v MoviesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	// To find the Movie the parameter movie_id is used.
	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	ImdbData := MoviesOMDBData(movie.ImdbID)

	c.Set("ImdbData", ImdbData)
	return c.Render(200, r.Auto(c, movie))
}

// New renders the form for creating a new Movie.
// This function is mapped to the path GET /movies/new
func (v MoviesResource) New(c buffalo.Context) error {
	c.Set("title", "")
	return c.Render(200, r.Auto(c, &models.Movie{}))
}

func trimQuotes(s string) string {
	if len(s) >= 2 {
		if s[0] == '"' && s[len(s)-1] == '"' {
			return s[1 : len(s)-1]
		}
	}
	return s
}

// Create adds a Movie to the DB. This function is mapped to the
// path POST /movies
func (v MoviesResource) Create(c buffalo.Context) error {
	// Allocate an empty Movie
	movie := &models.Movie{}

	// currentUser = c.Get("current_user")
	// log.Printf("Current User ID: %v", cu)

	// Bind movie to the html form elements
	if err := c.Bind(movie); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// TODO: Check IMDB ID Value has been given
	// imdbV, _ := movie.Imdb.Value()
	// if len(*imdbV) == 0 {
	// 	// and redirect to the movies index page
	// 	return c.Render(201, r.Auto(c, movie))
	// 	c.Flash().Add("danger", "Movie IMDB ID is missing.")
	// }

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(movie)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, movie))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was created successfully")

	// and redirect to the movies index page
	return c.Render(201, r.Auto(c, movie))
}

// Edit renders a edit form for a Movie. This function is
// mapped to the path GET /movies/{movie_id}/edit
func (v MoviesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, movie))
}

// Update changes a Movie in the DB. This function is mapped to
// the path PUT /movies/{movie_id}
func (v MoviesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Movie to the html form elements
	if err := c.Bind(movie); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(movie)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, movie))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was updated successfully")

	// and redirect to the movies index page
	return c.Render(200, r.Auto(c, movie))
}

// Destroy deletes a Movie from the DB. This function is mapped
// to the path DELETE /movies/{movie_id}
func (v MoviesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Movie
	movie := &models.Movie{}

	// To find the Movie the parameter movie_id is used.
	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(movie); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Movie was destroyed successfully")

	// Redirect to the movies index page
	return c.Render(200, r.Auto(c, movie))
}

// OMDBSearch makes a request to OMDB and attempt to retrieve
// a movie.
func MoviesOMDBSearch(c buffalo.Context) error {

	//data := []models.ImdbData{}

	type AutoGenerated struct {
		Search []struct {
			Title  string `json:"Title"`
			Year   string `json:"Year"`
			ImdbID string `json:"imdbID"`
			Type   string `json:"Type"`
			Poster string `json:"Poster"`
		} `json:"Search"`
		TotalResults string `json:"totalResults"`
		Response     string `json:"Response"`
	}

	var search AutoGenerated

	title := c.Request().FormValue("title")
	title = url.QueryEscape(title)

	s := []string{OMDB_URL, "?s=", title, "&apikey=", OMDB_API_KEY}
	link := fmt.Sprintf(strings.Join(s, ""))

	resp, err := http.Get(link)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	var bodyBytes []byte
	if resp.StatusCode == http.StatusOK {
		bodyBytes, _ = ioutil.ReadAll(resp.Body)
		err = json.Unmarshal(bodyBytes, &search)
		if err != nil {
			return errors.WithStack(err)
		}
	}
	c.Set("search", search.Search)
	return c.Render(200, r.JavaScript("movies/search.js"))
}

func MoviesVote(c buffalo.Context) error {

	movie := &models.Movie{}
	tx := c.Value("tx").(*pop.Connection)
	if err := tx.Find(movie, c.Param("movy_id")); err != nil {
		return errors.WithStack(err)
	}

	var vote bool
	switch value := c.Param("value"); value {
	case "true":
		vote = true
	default:
		vote = false
	}

	usr := c.Value("current_user").(*models.User)

	// Update who voted voted what
	if vote {
		if !movie.UserIsFor(usr.ID) {
			movie.AddUserFor(usr.ID)
		} else {
			movie.RemoveUserFor(usr.ID)
		}
		movie.RemoveUserAgainst(usr.ID)
	} else {
		if !movie.UserIsAgainst(usr.ID) {
			movie.AddUserAgainst(usr.ID)
		} else {
			movie.RemoveUserAgainst(usr.ID)
		}
		movie.RemoveUserFor(usr.ID)
	}

	// Update movie score
	uf := movie.UsersFor
	ua := movie.UsersAgainst
	score := len(uf) - len(ua)
	movie.Score = score

	verrs, err := tx.ValidateAndUpdate(movie)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, movie))
	}

	c.Flash().Add("success", "Your vote was updated successfuly.")

	// and redirect to the movies index page
	// return c.Render(200, r.Auto(c, movie))
	return c.Render(200, r.JavaScript("movies/vote.js"))
}

// MovieOMDBData makes a request to OMDB to retrieve the details
// of a movie from its unique tt id
func MoviesOMDBData(imdbID string) models.ImdbData {
	data := models.ImdbData{}

	s := []string{OMDB_URL, "?i=", imdbID, "&apikey=", OMDB_API_KEY}
	link := fmt.Sprintf(strings.Join(s, ""))

	resp, err := http.Get(link)
	if err != nil {
		return data
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusOK {
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		json.Unmarshal(bodyBytes, &data)
	}

	return data
}
